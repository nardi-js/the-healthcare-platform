rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAuthor(data) {
      return isAuthenticated() && data.authorId == request.auth.uid;
    }

    // Questions collection
    match /questions/{questionId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if 
        isAuthenticated() || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'lastViewed', 'uniqueViewers', 'viewHistory']);
      allow delete: if isAuthor(resource.data);

      // Answers subcollection
      match /answers/{answerId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }

      // Comments for questions
      match /comments/{commentId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if 
        isAuthenticated() || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'lastViewed', 'uniqueViewers', 'viewHistory']);
      allow delete: if isAuthor(resource.data);

      // Comments for posts
      match /comments/{commentId} {
        allow read: if true;
        allow write: if isAuthenticated();
      }
    }

    // Votes collections
    match /{path=**}/votes/{voteId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create, update: if isAuthenticated() && userId == request.auth.uid;
      allow delete: if false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}